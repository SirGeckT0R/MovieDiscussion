version: '3.4'

services:
  apigateway:
    image: ${DOCKER_REGISTRY-}apigateway
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Server/ApiGateway/ApiGateway/Dockerfile
    ports:
      - ${API_GATEWAY_PORTS}

  userservicewebapi:
    image: ${DOCKER_REGISTRY-}userservicewebapi
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Server/UserService/UserServiceWebAPI/Dockerfile
    ports:
      - ${USER_SERVICE_PORTS}

  movieservicewebapi:
    image: ${DOCKER_REGISTRY-}movieservicewebapi
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Server/MovieService/MovieServiceWebAPI/Dockerfile
    ports:
      - ${MOVIE_SERVICE_PORTS}

  discussionservicewebapi:
    image: ${DOCKER_REGISTRY-}discussionservicewebapi
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Server/DiscussionService/DiscussionServiceWebAPI/Dockerfile
    ports:
      - ${DISCUSSION_SERVICE_PORTS}

  redis:
    image: redis:latest
    env_file:
      - .env
    ports:
      - ${REDIS_PORTS}

  postgres:
    image: postgres:latest
    env_file:
      - .env
    volumes:
      - user_data:/usr/share/user/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_PORTS}

  moviemongodb:
    image: mongo
    restart: always
    volumes:
      - movie_data:/usr/share/movie/data
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - ${MOVIE_MONGO_PORTS}

  discussionmongodb:
    image: mongo
    restart: always
    volumes:
      - discuss_data:/usr/share/discuss/data
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DISCUSSION_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DISCUSSION_PASSWORD}
    ports:
      - ${MONGO_DISCUSSION_PORTS}
   
  elasticsearch:
   container_name: elasticsearch
   image: elasticsearch:8.14.3
   environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xms512m
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
   ports:
    - ${ELASTIC_PORTS}
   volumes:
    - elasticsearch-data:/usr/share/elasticsearch/data
   networks:
    - elastic

  logstash:
    image: logstash:7.9.1
    container_name: logstash
    ports:
      - ${LOGSTASH_PORTS}
    volumes:
      - logstash_data:/usr/share/logstash/data

    networks:
      - elastic
    depends_on:
      - elasticsearch

  kibana:
   container_name: kibana
   image: kibana:8.14.3
   ports:
    - ${KIBANA_PORTS}
   depends_on:
    - elasticsearch
   volumes:
    - kibana_data:/usr/share/kibana/data
   environment:
      - ELASTICSEARCH_URL=${ELASTIC_URL}
   networks:
    - elastic

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    volumes:
      - rabbitmq_data:/usr/share/rabbitmq/data
    ports:
      - ${RABBITMQ_PORTS}
  
networks:
  elastic:
    driver: bridge
volumes:
  elasticsearch-data:
  logstash_data:
  kibana_data:
  discuss_data:
  movie_data:
  user_data:
  rabbitmq_data:


