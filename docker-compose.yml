version: '3.4'

services:
  apigateway:
    image: ${DOCKER_REGISTRY-}apigateway
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Server/ApiGateway/ApiGatewayWebAPI/Dockerfile
    ports:
      - ${API_GATEWAY_PORTS}

  userservicewebapi:
    image: ${DOCKER_REGISTRY-}userservicewebapi
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Server/UserService/UserServiceWebAPI/Dockerfile
    ports:
      - ${USER_SERVICE_PORTS}

  movieservicewebapi:
    image: ${DOCKER_REGISTRY-}movieservicewebapi
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Server/MovieService/MovieServiceWebAPI/Dockerfile
    ports:
      - ${MOVIE_SERVICE_PORTS}

  discussionservicewebapi:
    image: ${DOCKER_REGISTRY-}discussionservicewebapi
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    build:
      context: .
      dockerfile: Server/DiscussionService/DiscussionServiceWebAPI/Dockerfile
    ports:
      - ${DISCUSSION_SERVICE_PORTS}

  postgres:
    image: postgres:latest
    env_file:
      - .env
    volumes:
      - user_data:/usr/share/user/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_PORTS}

  moviemongodb:
    image: mongo
    restart: always
    volumes:
      - movie_data:/usr/share/movie/data
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - ${MOVIE_MONGO_PORTS}

  
networks:
  elastic:
    driver: bridge
volumes:
  elasticsearch-data:
  logstash_data:
  kibana_data:
  discuss_data:
  movie_data:
  user_data:
  rabbitmq_data:


